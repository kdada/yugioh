
Player:
包含该玩家的所有运行时卡牌以及相关区域的信息,以及队伍信息
保存一个当前视点该玩家可发动的效果列表,效果列表包含能发动效果的卡牌,以及效果编号,效果优先级
不包含任何操作方法
Scene:
管理多个Player的信息,保存场地卡区域信息
保存一个事件分发器
为所有回合阶段切换前后结束,抽牌前后,攻击前后,卡牌位置变更前后,效果发动前后,以及其他特殊效果注册事件,每个事件都有对应的详细参数,通过参数能够在发生前避免事件的发生,并且可以改变发生的流程,例如在抽牌前,参数里有个抽卡数量的选项,默认是0,游戏本身的监听器会将起设置为1,而如果某些效果阻止抽牌或者增加抽牌的数量,则可以将该数量设置为0或其他数字来达到目的;而且也有指向下一个阶段的参数,监听器可以直接修改下一个参数,以达到跳过某些阶段的功能

游戏阶段存在一个有序链表中,可以移除相应阶段

当触发一个事件之后,检查每个玩家的可发动效果列表,如果有可以发动的效果,则向该玩家询问是否发动那些效果
取消或发动某效果后,如果该玩家还有优先级大于等于的效果则继续询问,直到该玩家取消或者效果列表中没有优先级高的效果,然后检查下一个玩家的效果列表继续相同的操作,所有效果发动完毕后,清空所有用户的可发动效果列表,只有在玩家效果列表中存在相应的效果才能发动
任何时候连续发动的效果都会构成一个发动栈,后发动的先生效
所有效果都能检查场景中的所有信息

场景能改变卡牌位置,例如从手牌移动到场地上(即召唤)
场景能改变当前阶段,跳过阶段,重复某个阶段等
场景能够进行攻击设定,在战斗阶段,保存一个可攻击列表,即当前玩家的每个怪兽能够攻击谁,能够攻击几次,并且怪兽效果可修改可攻击列表
场景能够发动效果
场景能通知玩家选择卡牌以及卡牌的数量,包括选择场上指定区域的卡片或者弹框显示其他卡片

场景的所有方法都会向所有玩家发送通知,并且等待所有玩家回复后才会进行下一步操作

玩家可通过指令调用场景的方法,效果可直接调用场景的方法

卡牌应该有一些固定事件
从某区域移动到某区域时触发

卡牌信息分为两部分
一.默认部分,即卡片的原始属性,包括卡片编号(卡片名称,卡片描述,卡片图片),卡片类型,怪兽属性,怪兽种族,怪兽效果,怪兽召唤,怪兽攻击类型,魔法卡类型,陷阱卡类型,攻击力,防御力
二.运行时部分,即卡片运行时id,卡片当前所在区域,卡片状态,攻击力,防御力,原始所属玩家,当前所属玩家,效果关联卡片,效果方法,初始化注册事件方法
所有的卡片都有机会在游戏刚开始的时候注册自己的事件或监听器,也可以通过卡牌固定事件注册事件或监听器
卡片应在监听器无效的时候移除自己的监听器


普通召唤的实现如下:
1.根据卡片固定事件得知当前卡片被移动到了手牌中,此时注册并监听进入两个主要阶段的事件,并且监听卡牌位置变更事件
2.进入主要阶段后,检查场上怪兽数量是否足以进行召唤
3.将召唤效果添加到可发动效果列表,并注明发动类型(召唤,发动,放置,里侧守备召唤,表侧守备召唤等),效果编号,触发预召唤事件(重力网等卡片可能会阻止召唤)
4.等待用户选择卡牌发动召唤效果,让用户选择作为祭品的怪兽
5.将祭品移入墓地,将当前怪兽移动到场上


通信逻辑:
Comunicator:
Comunicator内存储了所有接收者编号以及分队情况
通过PostMessage指定接收者,指令编号,指令数据的形式发送消息给指定的接收者,异步发送,然后通过监听指令事件得到接收者的回复
通过GetMessage获取发送者,指令编号,指令数据,并根据指令编号发送指令事件
GetMessage若取不到消息则会阻塞

发送的指令编号和回复的指令编号相同


游戏运行方式:

场景运行一个go程(main),main开启一个go程(game)并启动游戏的第一个回合,之后的游戏处理基本上就是在这个go程中进行
game负责运行游戏的第一次事件处理,并发送消息给玩家,若需要等待玩家响应,则会阻塞等待,game运行完毕之后,则应该是等待玩家进行指令操作,例如切换阶段
之后main从Comunicator中获取消息,如果有消息,则启动一个新的go程将消息发给自己的ComunitationEventDispatcher,然后进行事件处理
之后main继续等待下一个消息


ComunitationEventDispatcher的监听器接受到特定种类的消息之后,则进行相应的处理


阶段处理方式:
每个阶段都有一个事件
在事件结束的时候调用方法进入下一个阶段,如果下一个阶段被标记为skip,那么直到找到一个不为skip的阶段,进入该阶段,当所有阶段都执行完毕后,调用方法进入下一回合,并重置所有阶段信息
若某个阶段要完全等待用户操作,则由用户手动切换阶段(例如主要阶段1 攻击阶段 主要阶段2)

攻击阶段实现方式:
通过标记相应卡片的CardSlot的攻击次数以及可攻击对象,来实现攻击说明,每次攻击后应该触发攻击相关的事件

效果执行方式:
每次使用GameEventDispatcher进行事件分发之后,都应该检查EffectChain,如果EffectChain中存在效果,则应该按照连锁的方式逐个执行效果。


